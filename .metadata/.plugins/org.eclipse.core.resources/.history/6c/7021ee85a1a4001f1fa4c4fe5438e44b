package com.amxMobile.SixBookmarks.Services;

import java.io.StringWriter;
import java.util.*;

import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;
import org.w3c.dom.*;
import org.xmlpull.v1.*;

import android.util.*;

import com.amxMobile.SixBookmarks.Database.*;
import com.amxMobile.SixBookmarks.Entities.*;
import com.amxMobile.SixBookmarks.Entities.Entity;
import com.amxMobile.SixBookmarks.Runtime.*; 

public class ODataServiceProxy extends ServiceProxy
{
	private final String AtomNamespace = "http://www.w3.org/2005/Atom"; 
	private final String MsMetadataNamespace = "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata";
	private final String MsDataNamespace = "http://schemas.microsoft.com/ado/2007/08/dataservices";
	
	public ODataServiceProxy(String serviceName) 
	{
		super(serviceName);
	}
	
	public String GetServiceUrl(EntityType et)
	{
		return getResolvedServiceUrl() + "/" + et.getShortName();
	}
	
	protected ArrayList LoadEntities(Document doc, EntityType et) throws Exception
	{
        // parse...
        NodeList feedElements = doc.getElementsByTagNameNS(AtomNamespace, "feed");
        if(feedElements.getLength() == 0)
        	throw new Exception("A 'feed' element was not found.");
        
        // feed...
        Element feed = (Element)feedElements.item(0);
        NodeList entryElements = feed.getElementsByTagNameNS(AtomNamespace, "entry");

		// walk...
        ArrayList results = et.CreateCollectionInstance();
		for(int i = 0; i < entryElements.getLength(); i++)
		{
			Element entry = (Element)entryElements.item(i);

			// get the content item...
			Element content = XmlHelper.GetElement(entry, AtomNamespace, "content", false);
			if(content == null)
				throw new Exception(String.format("A content element not found on item '%d'.", i));
			
			// then get the properties element...
			Element properties = XmlHelper.GetElement(content, MsMetadataNamespace, "properties", false);
			if(properties == null)
				throw new Exception(String.format("A properties element not found on item '%d'.", i));

			// then get the fields...
			NodeList fields = properties.getElementsByTagNameNS(MsDataNamespace, "*");
			Hashtable<String, Object> values = new Hashtable<String, Object>(); 
			for(int j = 0; j < fields.getLength(); j++)
			{
				Element field = (Element)fields.item(j);
				
				// value...
				Object value = GetValue(field);
				
				// is it a field?
				if(et.IsField(field.getLocalName()))
					values.put(field.getLocalName(), value);
			}
			
			// create...
			Bookmark bookmark = new Bookmark(values);
			results.add(bookmark);
		}
		// return...
		return results;
	}

	private Object GetValue(Element field) throws Exception 
	{
		// fields are provided with a data element, like this....
		// <d:BookmarkId m:type="Edm.Int32">1002</d:BookmarkId>
		String asString = field.getAttributeNS(MsMetadataNamespace, "type");
		
		// nothing?
		if(asString == null || asString.length() == 0)
			return XmlHelper.GetStringValue(field);
		else if(asString.compareTo("Edm.Int32") == 0)
			return XmlHelper.GetInt32Value(field);
		else
			throw new Exception(String.format("Cannot handle '%s'.", asString));
	}
	
	private void ExecuteODataOperation(ODataOperation opType, String url, String xml) throws Exception
	{
		// make sure we're authenticated...
		EnsureApiAuthenticated();

		// show...
		HttpRequestBase op = null;
		if(opType == ODataOperation.Update)
			op = new HttpMerge(url);
		else if(opType == ODataOperation.Insert)
			op = new HttpPost(url);
		else if(opType == ODataOperation.Delete)
			op = new HttpDelete(url);
		else
			throw new Exception(String.format("Cannot handle '%s'.", opType));
		
		// add our headers...
		Hashtable<String, String> extraHeaders = GetDownloadSettings().getExtraHeaders();
		for(String name : extraHeaders.keySet())
			op.addHeader(name, extraHeaders.get(name));
		
		// create an entity...
		if(xml != null)
			((HttpEntityEnclosingRequestBase)op).setEntity(new ODataEntity(xml));
		
		// request...
		HttpClient client = new DefaultHttpClient();
		HttpResponse response = client.execute(op);

		// what happened...  200 is OK, but 204 also is (which means no content)...
		int code = response.getStatusLine().getStatusCode(); 
		if(code != 200 && code != 204)
		{
			// get...
			String error = HttpHelper.GetHttpEntityContent(response.getEntity());
			
			// throw...
			throw new Exception(String.format("Download of '%s' via operation '%s' returned HTTP '%d' (%s).\nResponse: %s\nXML: %s", 
					url, opType, code, response.getStatusLine().getReasonPhrase(), error, xml));
		}
	}
		
	public void PushInsert(IContextSource context, Entity entity) throws Exception 
	{
		// an insert is an update but with a different url...
		PushUpdate(context, entity, 0);
	}

	public void PushDelete(IContextSource context, Entity entity, int serverId) throws Exception
	{
		// get the entity URL...
		String url = GetEntityUrlForPush(entity, serverId);	
		ExecuteODataOperation(ODataOperation.Delete, url, null);
	}

	public void PushUpdate(IContextSource context, Entity entity, int serverId) throws Exception 
	{
		// update...
		XmlSerializer xml = Xml.newSerializer();
		StringWriter writer = new StringWriter();
		xml.setOutput(writer);
		
		// start...
		xml.startDocument("UTF-8", true);
		xml.setPrefix("", AtomNamespace);
		xml.setPrefix("m", MsMetadataNamespace);
		xml.setPrefix("d", MsDataNamespace);
		
		// start entry and content and properties...
		xml.startTag(AtomNamespace, "entry");
		xml.startTag(AtomNamespace, "content");
		xml.attribute("", "type", "application/xml");
		xml.startTag(MsMetadataNamespace, "properties");
		
		// fields...
		EntityType et = entity.getEntityType();
		for(EntityField field : et.getFields())
		{
			if(!(field.getIsKey()) && field.getIsOnServer())
			{
				xml.startTag(MsDataNamespace, field.getName());
				xml.text(entity.GetValue(field).toString());
				xml.endTag(MsDataNamespace, field.getName());
			}
		}
		
		// end content and entry...
		xml.endTag(MsMetadataNamespace, "properties");
		xml.endTag(AtomNamespace, "content");
		xml.endTag(AtomNamespace, "entry");
		
		// end...
		xml.endDocument();
		
		// run...
		String url = null; 
		ODataOperation op = ODataOperation.Update;
		String xmlAsString = writer.toString();
		if(serverId != 0)
			url = GetEntityUrlForPush(entity, serverId);
		else
		{
			url = this.GetServiceUrl(et);
			op = ODataOperation.Insert;
		}
		
		// run...
		ExecuteODataOperation(op, url, xmlAsString);
	}

	private String GetEntityUrlForPush(Entity entity, int serverId)
	{
		return String.format("%s(%d)", GetServiceUrl(entity.getEntityType()), serverId);
	}
}
